// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Enum for post categories
enum Category {
  NEWS
  SPORTS
  ENTERTAINMENT
  TECHNOLOGY
  FOOD
  LIFESTYLE
  ART
  OTHER
}

// Schema for user
model User {
  id             String    @id @default(auto()) @map("_id") @db.ObjectId
  // UID received from firebase
  firebaseUID    String    @unique
  // Username for the user - must be unique.
  username       String?   @unique
  // Name of the user
  name           String?
  // User's Email address
  email          String    @unique
  // User's Display picture link
  photoURL       String?   @default("")
  // User's Bio
  bio            String    @default("")
  posts          Post[]
  // Posts liked by the user - contains IDs of the posts
  likedPosts     String[]
  // Links - not implemented yet
  links          String[]
  // Number of people that follow this user
  followerCount  Int       @default(0)
  // IDs of people that follow this user
  followers      String[]
  // Number of people that the user is following
  followingCount Int       @default(0)
  // IDs of people that the user follows
  following      String[]
  // Like count for all of user's posts
  totalLikes     Int       @default(0)
  // Comments created by the user
  Comment        Comment[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

// Schema for blog post
model Post {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  // Title of the post
  title         String
  // Content - HTML string from react quill
  content       String
  // Thumbnail URL - hosted on cloudinary.
  thumbnail     String
  // Category for the post - can be one of the enum values
  category      Category
  // other Category holds a string value which replaces category
  otherCategory String?
  // Like count will increment each time a like is added
  likeCount     Int       @default(0)
  // Likes will hold the ID of the users who have liked the post
  likes         String[]
  // Comments on the Post
  comments      Comment[]
  // Comment count will increment each time someone comments
  commentCount  Int       @default(0)
  // User who has created the post (Author)
  User          User?     @relation(fields: [userId], references: [id])
  // ID of user who has created the post (Author)
  userId        String?   @db.ObjectId
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

// Schema for comments on the post
model Comment {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  content    String
  User       User      @relation(fields: [userId], references: [id])
  userId     String    @db.ObjectId
  Post       Post      @relation(fields: [postId], references: [id])
  postId     String    @db.ObjectId
  parent     Comment?  @relation("CommentToComment", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  parentId   String?   @db.ObjectId
  replies    Comment[] @relation("CommentToComment")
  replyCount Int       @default(0)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}
